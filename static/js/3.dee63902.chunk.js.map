{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","descriptionBlock","mainPhoto","contact","postsBlock","posts","item","ProfileStatusHooks","props","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","EditeMode","updateStatus","react_default","a","createElement","onChange","e","currentTarget","value","autoFocus","onBlur","onDoubleClick","Contact","_ref","contactTitle","contactValue","className","s","ProfileData","profile","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","keys","contacts","map","key","ProfileInfo_Contact","ProfileInfo","Preloader","src","photos","large","userPhoto","alt","isOwner","type","target","files","length","savePhoto","ProfileInfo_ProfileData","ProfileStatusHooks_ProfileStatusHooks","Post","smallPhoto","message","likesCount","MyPosts","React","memo","postsElements","p","MyPosts_Post_Post","id","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength","maxLengthCreater","reduxForm","form","handleSubmit","Field","component","TextArea","placeholder","validate","name","MyPostsContainer","connect","state","_state$profilePage$pr","_state$profilePage$pr2","profilePage","small","dispatch","addPostActionCreator","Profile","Profile_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","ProfileContainer","userId","this","match","params","authUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","components_Profile_Profile","assign","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.dee63902.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__OCVwc\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3e1B6\",\"contact\":\"ProfileInfo_contact__3QeRo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__14cb_\",\"posts\":\"MyPosts_posts__1bGHg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3A0Bu\"};","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport const ProfileStatusHooks = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status] );\r\n    const EditeMode = () => {\r\n        setEditMode(!editMode);\r\n        props.updateStatus(status);\r\n\r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode ?\r\n                <div>\r\n                    <span onDoubleClick={EditeMode}>{props.status || \"No STATUS\"}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        autoFocus={true}\r\n                        onBlur={EditeMode}\r\n                        value={status}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport { ProfileStatusHooks } from './ProfileStatusHooks';\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    const onMainPhotoSelector = (e) => {\r\n        if (e.target.files.length)\r\n            props.savePhoto(e.target.files[0]);\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto} alt=\"avatar\" className={s.mainPhoto} />\r\n                <div>{props.isOwner && <input type=\"file\" onChange={onMainPhotoSelector} />}</div>\r\n                <ProfileData profile={props.profile}/>\r\n                <ProfileStatusHooks status={props.status} updateStatus={props.updateStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n    return <div className={s.contact}>\r\n        <b>{contactTitle}</b>: {contactValue || \"no information\"}\r\n    </div>\r\n}\r\n\r\nconst ProfileData = (props) => {\r\n    return <div>\r\n        <div><h1>{props.profile.fullName}</h1></div>\r\n        <div>\r\n            <b>Looking for a job:</b> {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {\r\n            props.profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {props.profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {props.profile.aboutMe || \"no information\"}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(props.profile.contacts).map(key => {\r\n                return <Contact\r\n                    key={key}\r\n                    contactTitle={key}\r\n                    contactValue={props.profile.contacts[key]}\r\n                />\r\n            })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src={props.smallPhoto} alt='null' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field } from 'redux-form';\r\nimport { reduxForm } from 'redux-form';\r\nimport { maxLengthCreater } from '../../../utils/Validators/validators';\r\nimport { TextArea } from '../../common/FormsControls/FormsControls';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\nconst MyPosts = React.memo(props => {\r\n    // shouldComponentUpdate(nextProps, nextStatus) {\r\n    //     return nextProps !== this.props || nextStatus !== this.state;\r\n    // }\r\n    let postsElements =\r\n        props.posts.map(p => <Post\r\n                                key={p.id}\r\n                                message={p.message}\r\n                                likesCount={p.likesCount}\r\n                                smallPhoto = {props.smallPhoto}\r\n                                />);\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nconst maxLength = maxLengthCreater(100);\r\n\r\nconst addNewPostForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field\r\n                component={TextArea}\r\n                placeholder=\"Post message\"\r\n                validate={[maxLength]}\r\n                name=\"newPostText\"\r\n            />\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm({ form: \"profileAddNewPost\" })(addNewPostForm);\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText,\r\n        smallPhoto: state.profilePage.profile?.photos?.small,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getUserProfile, getStatus, updateStatus, savePhoto} from \"../../redux/profile-reducer\";\nimport {withRouter} from \"react-router-dom\";\nimport { compose } from 'redux';\n\nclass ProfileContainer extends React.Component {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authUserId;\n            if (!userId)\n                this.props.history.push('/login')\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(prevProps.match.params.userId !== this.props.match.params.userId)\n            this.refreshProfile();\n    }\n\n\n    render() {\n        return (\n            <Profile\n                {...this.props}\n                isOwner={!this.props.match.params.userId}\n                status={this.props.status}\n                profile={this.props.profile}\n                updateStatus={this.props.updateStatus}\n                savePhoto={this.props.savePhoto}\n            />\n        )\n    }\n}\n\n\n\nconst mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n});\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\n    withRouter\n)(ProfileContainer);;"],"sourceRoot":""}